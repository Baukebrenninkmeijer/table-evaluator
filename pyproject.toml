[project]
name = "table-evaluator"
dynamic = ["version"]
description = "A package to evaluate how close a synthetic data set is to real data."
authors = [
    { name = "Bauke Brenninkmeijer", email = "bauke.brenninkmeijer@gmail.com" }
]
license = "MIT"
requires-python = ">=3.10"
readme = "README.md"
keywords = ['Table-evaluation', 'synthetic-data', 'data-generation', 'data', 'generation', 'data-evaluation']
classifiers = [
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3 :: Only',
    "Operating System :: OS Independent",
]
dependencies = [
    "pyarrow==17.0.0",
    "scikit-learn==1.5.1",
    "tqdm==4.66.5",
    "matplotlib==3.9.2",
    "numpy==1.26.4",
    "seaborn==0.13.2",
    "pandas==2.2.2",
    "scipy==1.12.0",
    "ipython==8.28.0",
    "pytest==8.3.2",
    "pytest-cov==4.0.0",
    "pytest-mock==3.14.0",
    "setuptools",
    "tomli>=1.2.0;python_version<'3.11'",
    "loguru>=0.7.0",
    "ruff>=0.12.5",
    "pydantic>=2.11.7",
    "setuptools-scm>=8.3.1",
    "pendulum>=3.1.0",
]


[project.optional-dependencies]
dev = [
    "build>=1.2.2.post1",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.7",
    "psutil>=5.9.0",
    "pytest-benchmark>=4.0.0",
    "pre-commit==3.8.0",
    "sphinx-rtd-theme==2.0.0",
    "sphinx==7.3.1",
    "m2r2==0.3.3.post2",
]
text = [
    "sentence-transformers>=2.2.0",
    "nltk>=3.8.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
]
all = [
    "sentence-transformers>=2.2.0",
    "nltk>=3.8.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "build>=1.2.2.post1",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.7",
    "psutil>=5.9.0",
    "pytest-benchmark>=4.0.0",
]


[tool.setuptools_scm]

[project.urls]
"Homepage" = "https://github.com/Baukebrenninkmeijer/Table-Evaluator"
"Documentation" = "https://baukebrenninkmeijer.github.io/table-evaluator/index.html"

[build-system]
requires = ["setuptools>=61.0", "setuptools-scm"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
where = ["."]
include = ["table_evaluator*"]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
norecursedirs = ["benchmarks", ".git", ".tox", "dist", "*.egg"]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "data_loading: marks tests as data loading benchmarks",
    "evaluation: marks tests as evaluation benchmarks",
    "data_conversion: marks tests as data conversion benchmarks",
    "association: marks tests as association metric benchmarks"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["table_evaluator"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.ruff]
exclude = []
line-length = 120

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
lint.select = ['E', 'F', 'W', 'ANN', 'ASYNC', 'S', 'FBT', 'B', 'A', 'DTZ', 'INT', 'ISC', 'LOG', 'ICN', 'G', 'INP', 'PIE', 'T20', 'PYI', 'PT', 'Q', 'RSE', 'RET', 'SLF', 'SIM', 'TID', 'TC', 'ARG', 'PTH', 'FLY', 'I', 'C90', 'NPY', 'PD', 'PERF', 'DOC', 'UP', 'FURB', 'RUF', 'TRY']
lint.ignore = ['G001', 'G002', 'Q000', 'Q003', 'TRY003', 'G004', 'T201', 'TRY300', 'TC003']
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.lint.mccabe]
max-complexity = 12

[dependency-groups]
dev = [
    "pre-commit>=3.8.0",
]
jupyter = [
    "ipython>=8.28.0",
    "ipywidgets>=8.1.7",
]


[tool.ruff.lint.per-file-ignores]
# Tests: Ignore assertions, type annotations, and unused arguments
"tests/*" = ["S101", "ANN001", "ANN201", "ANN003", "ANN204", "ARG001", "ARG002", "ARG005", "SLF001"]

# Benchmarks: Allow prints and missing annotations for performance testing
"benchmarks/*" = ["T201", "ANN001", "ANN201", "ANN204", "INP001", "TRY300"]

# Documentation: Allow missing __init__.py and datetime without timezone
"docs/*" = ["INP001", "DTZ005"]

# Examples and notebooks: Allow prints, missing imports, and relaxed formatting
"example*.py" = ["T201", "ANN001", "ANN201"]
"*.ipynb" = ["T201", "F821", "ANN001", "ANN201", "ANN204", "E501", "A004"]
"notebooks/*" = ["T201", "F821", "ANN001", "ANN201", "ANN204", "E501", "A004", "S101"]

# Main package: Allow some specific patterns
"table_evaluator/__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"table_evaluator/notebook.py" = ["T201"]  # Allow prints in notebook utilities

# Additional reasonable ignores
"*/visualization/*" = ["ANN001", "ANN201"]  # Visualization functions often have matplotlib types
"table_evaluator/plots.py" = ["S101", "ANN001", "ANN201", "RET503"]  # Plotting utilities
