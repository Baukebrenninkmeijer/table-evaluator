name: Code Quality & Security

on:
  push:
    branches: [ main, master, phase1/infrastructure-modernization ]
  pull_request:
    branches: [ main, master, phase1/infrastructure-modernization ]
  schedule:
    # Run security scans daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  code-quality-security:
    runs-on: ubuntu-latest
    name: Code Quality & Security Checks
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Sufficient for conventional commit analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      run: pip install uv

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install Arrow C++ library
      run: |
        sudo apt-get update
        sudo apt-get install -y -V ca-certificates lsb-release wget
        wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt-get update
        sudo apt-get install -y -V libarrow-dev

    - name: Clear uv cache
      run: uv cache clean

    - name: Install dependencies
      run: uv sync --extra all

    - name: Run security scan with bandit
      run: uv run bandit -r table_evaluator/ -f json -o bandit-report.json || true

    - name: Check for vulnerabilities with safety
      run: uv run safety check --json --output safety-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    name: Tests on Python ${{ matrix.python-version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: pip install uv

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-

    - name: Cache Arrow C++ library
      uses: actions/cache@v4
      id: cache-arrow
      with:
        path: /usr/lib/x86_64-linux-gnu/libarrow*
        key: ${{ runner.os }}-arrow-cpp

    - name: Install Arrow C++ library
      if: steps.cache-arrow.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y -V ca-certificates lsb-release wget
        wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt-get update
        sudo apt-get install -y -V libarrow-dev

    - name: Clear uv cache
      run: uv cache clean

    - name: Install dependencies
      run: uv sync --extra all

    - name: Run tests with coverage
      run: uv run pytest tests/ --cov=table_evaluator --cov-report=xml --cov-report=term

    - name: Build documentation
      run: uv run sphinx-build -M html docs/source docs/build

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  conventional-commits:
    runs-on: ubuntu-latest
    name: Conventional Commits Check
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Sufficient for conventional commit analysis

    - name: Validate conventional commits
      uses: wagoid/commitlint-github-action@v5
      with:
        configFile: '.commitlintrc.json'
