name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: poetry-

    - name: Install dependencies
      run: poetry install --with development

    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0

    - name: Run security scan with bandit
      run: poetry run bandit -r table_evaluator/

    - name: Check for vulnerabilities with safety
      run: poetry run safety check

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    name: Tests on Python ${{ matrix.python-version }}
    needs: lint-and-security
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}
        restore-keys: poetry-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        # Install system dependencies if needed
        # sudo apt install -y gcc g++ gfortran libopenblas-dev liblapack-dev pkg-config
        poetry lock
        poetry install --with development

    - name: Run tests with coverage
      run: poetry run pytest tests/ --cov=table_evaluator --cov-report=xml --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
